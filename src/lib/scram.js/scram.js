!function(){var e=CryptoJS,t=e.lib,r=t.WordArray,n=e.algo,i=n.SHA256,s=e.HmacSHA256,o=t.Base,c=n.SCRAM=o.extend({cfg:o.extend({keySize:8,hasher:i,hmac:s}),init:function(e){this.cfg=this.cfg.extend(e)},nonce:function(){return lastNonce=r.random(4*this.cfg.keySize),lastNonce},saltedPassword:function(e,t,r){return CryptoJS.PBKDF2(e,t,{keySize:this.cfg.keySize,iterations:r,hasher:this.cfg.hasher})},clientKey:function(e){return this.cfg.hmac(e,"Client Key")},serverKey:function(e){return this.cfg.hmac(e,"Server Key")},storedKey:function(e){var t=this.cfg.hasher.create();return t.update(e),t.finalize()},signature:function(e,t){return this.cfg.hmac(e,t)},clientProof:function(e,t,r,n){for(var i=this.saltedPassword(e,t,r),s=this.clientKey(i),o=this.storedKey(s),c=this.signature(o,n),a=0;a<s.sigBytes/4;a+=1)s.words[a]=s.words[a]^c.words[a];return s.toString()},serverProof:function(e,t,r,n){var i=this.saltedPassword(e,t,r),s=this.serverKey(i);return this.signature(s,n).toString()}});e.SCRAM=function(e){return c.create(e)}}();
